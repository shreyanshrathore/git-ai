generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Project {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  name                String
  githubUrl           String
  deletedAt           DateTime?
  commits             Commit[]
  Meeting             Meeting[]
  savedQuestions      Question[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  UserToProject       UserToProject[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  project            Project  @relation(fields: [projectId], references: [id])
}

model SourceCodeEmbedding {
  id               String                 @id @default(cuid())
  summaryEmbedding Unsupported("vector")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id])
}

model Question {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  question        String
  answer          String
  projectId       String
  userId          String
  filesReferences Json?
  Project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Meeting {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  meetingUrl String
  projectId  String
  status     MeetingStatus @default(PROCESSING)
  name       String
  issues     Issue[]
  project    Project       @relation(fields: [projectId], references: [id])
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  start     String
  end       String
  summary   String
  gist      String
  headline  String
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
}

model StripeTransaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  credit    Int
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  imageUrl           String?
  firstName          String?
  lastName           String?
  emailAddress       String              @unique
  credits            Int                 @default(150)
  githubUserName     String?
  messages           Message[]
  questionAsked      Question[]
  stripeTransactions StripeTransaction[]
  UserToChat         UserToChat[]
  UserToProject      UserToProject[]
}

model Chat {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  messages     Message[]
  participants UserToChat[]
}

model UserToChat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  content   String
  senderId  String
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}
